{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MIN_FUND_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funderAddress",
          "type": "address"
        }
      ],
      "name": "getFundMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_fundMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x09f81a24ebcd3a9ebf034b5b2d75f52a813db16f2a4f2acf0b1cba5128d954a3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1057661",
    "logsBloom": "0x
    "blockHash": "0xbb73f7240e8a4ea9988bf85dca9d653373670e6ad8d2e2895f3b2bbef2d3c66e",
    "transactionHash": "0x09f81a24ebcd3a9ebf034b5b2d75f52a813db16f2a4f2acf0b1cba5128d954a3",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1057661",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "988c131347f0c33d1e97280f8376abc8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MIN_FUND_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funderAddress\",\"type\":\"address\"}],\"name\":\"getFundMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_fundMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Priyanka Sachan\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// As per solidity style guide : https://docs.soliditylang.org/en/v0.8.14/style-guide.html\\n// SPDX-License-Identifier:MIT\\n\\n// Pragma\\npragma solidity >=0.8.1 <0.9.0;\\n\\n// Imports\\nimport \\\"./PriceConvertor.sol\\\";\\n// For debugging\\n// import \\\"hardhat/console.sol\\\";\\n\\n// Error codes\\nerror FundMe__NotOwner();\\n\\n// Inerfaces,Libraries\\n\\n// Contracts\\n// Based on doxygen, can generate documentation using\\n// solc --userdoc --devodc FundMe.sol\\n/** @title A contract for crowd funding\\n * @author Priyanka Sachan\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type declarations\\n    using PriceConvertor for uint256;\\n\\n    // State variables\\n    uint256 public constant MIN_FUND_USD = 50 * 10**18;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) public s_fundMapping;\\n\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Modifiers\\n    modifier authenticate() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Adding arguemnts to get s_priceFeed according to network we are on\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getUsdValue(s_priceFeed) >= MIN_FUND_USD,\\n            \\\"Didn't send enough fund!\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_fundMapping[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public authenticate {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_fundMapping[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Payment failed.\\\");\\n    }\\n\\n    // Gas Optimization\\n    function cheaperWithdraw() public authenticate {\\n        // Mappings cannot be on memory\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_fundMapping[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Payment failed.\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getFundMapping(address funderAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_fundMapping[funderAddress];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xe73359f8c68d18b08dfb7921df370fd9d00f6d7a58d52bff7c9bb1dfe29b1aa6\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity >=0.8.1 <0.9.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConvertor {\\n    function getConversionRate(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Access contract on rinkeby network using its contract address on that network & ABI/interface class from npm\\n        (\\n            ,\\n            /*uint80 roundID*/\\n            int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n        return uint256(price * 10**10);\\n    }\\n\\n    function getUsdValue(uint256 _value, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (getConversionRate(priceFeed) * _value) / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xccffe8344d999aff095c10c3621cdf58512e6e53838f39c7e6e374773d563280\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200134338038062001343833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111c46200017f600039600081816102220152818161046401526105ef01526111c46000f3fe6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c14610181578063df7f036c146101be57610086565b806310b4c5d91461008b5780632a90c5fb146100c85780633ccfd60b146100f3578063893d20e81461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610afc565b6101fb565b6040516100bf9190610b42565b60405180910390f35b3480156100d457600080fd5b506100dd610213565b6040516100ea9190610b42565b60405180910390f35b3480156100ff57600080fd5b50610108610220565b005b34801561011657600080fd5b5061011f610460565b60405161012c9190610b6c565b60405180910390f35b34801561014157600080fd5b5061014a610488565b6040516101579190610be6565b60405180910390f35b6101686104b2565b005b34801561017657600080fd5b5061017f6105ed565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610c2d565b610891565b6040516101b59190610b6c565b60405180910390f35b3480156101ca57600080fd5b506101e560048036038101906101e09190610afc565b6108d8565b6040516101f29190610b42565b60405180910390f35b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103505760008082815481106102ca576102c9610c5a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061034890610cb8565b9150506102a8565b50600067ffffffffffffffff81111561036c5761036b610d01565b5b60405190808252806020026020018201604052801561039a5781602001602082028036833780820191505090505b50600090805190602001906103b09291906109f2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103d790610d61565b60006040518083038185875af1925050503d8060008114610414576040519150601f19603f3d011682016040523d82523d6000602084013e610419565b606091505b505090508061045d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045490610dd3565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104f1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092190919063ffffffff16565b1015610532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052990610e3f565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105e49190610e5f565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610672576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106f557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ab575b5050505050905060005b815181101561078057600082828151811061071d5761071c610c5a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077890610cb8565b9150506106ff565b50600067ffffffffffffffff81111561079c5761079b610d01565b5b6040519080825280602002602001820160405280156107ca5781602001602082028036833780820191505090505b50600090805190602001906107e09291906109f2565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161080790610d61565b60006040518083038185875af1925050503d8060008114610844576040519150601f19603f3d011682016040523d82523d6000602084013e610849565b606091505b505090508061088d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088490610dd3565b60405180910390fd5b5050565b60008082815481106108a6576108a5610c5a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000670de0b6b3a76400008361093684610952565b6109409190610eb5565b61094a9190610f3e565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d39190610ffc565b5050509150506402540be400816109ea9190611077565b915050919050565b828054828255906000526020600020908101928215610a6b579160200282015b82811115610a6a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a12565b5b509050610a789190610a7c565b5090565b5b80821115610a95576000816000905550600101610a7d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac982610a9e565b9050919050565b610ad981610abe565b8114610ae457600080fd5b50565b600081359050610af681610ad0565b92915050565b600060208284031215610b1257610b11610a99565b5b6000610b2084828501610ae7565b91505092915050565b6000819050919050565b610b3c81610b29565b82525050565b6000602082019050610b576000830184610b33565b92915050565b610b6681610abe565b82525050565b6000602082019050610b816000830184610b5d565b92915050565b6000819050919050565b6000610bac610ba7610ba284610a9e565b610b87565b610a9e565b9050919050565b6000610bbe82610b91565b9050919050565b6000610bd082610bb3565b9050919050565b610be081610bc5565b82525050565b6000602082019050610bfb6000830184610bd7565b92915050565b610c0a81610b29565b8114610c1557600080fd5b50565b600081359050610c2781610c01565b92915050565b600060208284031215610c4357610c42610a99565b5b6000610c5184828501610c18565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc382610b29565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cf657610cf5610c89565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d4b600083610d30565b9150610d5682610d3b565b600082019050919050565b6000610d6c82610d3e565b9150819050919050565b600082825260208201905092915050565b7f5061796d656e74206661696c65642e0000000000000000000000000000000000600082015250565b6000610dbd600f83610d76565b9150610dc882610d87565b602082019050919050565b60006020820190508181036000830152610dec81610db0565b9050919050565b7f4469646e27742073656e6420656e6f7567682066756e64210000000000000000600082015250565b6000610e29601883610d76565b9150610e3482610df3565b602082019050919050565b60006020820190508181036000830152610e5881610e1c565b9050919050565b6000610e6a82610b29565b9150610e7583610b29565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eaa57610ea9610c89565b5b828201905092915050565b6000610ec082610b29565b9150610ecb83610b29565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f0457610f03610c89565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4982610b29565b9150610f5483610b29565b925082610f6457610f63610f0f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f8e81610f6f565b8114610f9957600080fd5b50565b600081519050610fab81610f85565b92915050565b6000819050919050565b610fc481610fb1565b8114610fcf57600080fd5b50565b600081519050610fe181610fbb565b92915050565b600081519050610ff681610c01565b92915050565b600080600080600060a0868803121561101857611017610a99565b5b600061102688828901610f9c565b955050602061103788828901610fd2565b945050604061104888828901610fe7565b935050606061105988828901610fe7565b925050608061106a88828901610f9c565b9150509295509295909350565b600061108282610fb1565b915061108d83610fb1565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110cc576110cb610c89565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561110957611108610c89565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114657611145610c89565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118357611182610c89565b5b82820290509291505056fea2646970667358221220f367f60ffe38274ff97cddc97cbd287a5bd4ba5221997eb5dd567923cd0a534564736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c14610181578063df7f036c146101be57610086565b806310b4c5d91461008b5780632a90c5fb146100c85780633ccfd60b146100f3578063893d20e81461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610afc565b6101fb565b6040516100bf9190610b42565b60405180910390f35b3480156100d457600080fd5b506100dd610213565b6040516100ea9190610b42565b60405180910390f35b3480156100ff57600080fd5b50610108610220565b005b34801561011657600080fd5b5061011f610460565b60405161012c9190610b6c565b60405180910390f35b34801561014157600080fd5b5061014a610488565b6040516101579190610be6565b60405180910390f35b6101686104b2565b005b34801561017657600080fd5b5061017f6105ed565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610c2d565b610891565b6040516101b59190610b6c565b60405180910390f35b3480156101ca57600080fd5b506101e560048036038101906101e09190610afc565b6108d8565b6040516101f29190610b42565b60405180910390f35b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103505760008082815481106102ca576102c9610c5a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061034890610cb8565b9150506102a8565b50600067ffffffffffffffff81111561036c5761036b610d01565b5b60405190808252806020026020018201604052801561039a5781602001602082028036833780820191505090505b50600090805190602001906103b09291906109f2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103d790610d61565b60006040518083038185875af1925050503d8060008114610414576040519150601f19603f3d011682016040523d82523d6000602084013e610419565b606091505b505090508061045d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045490610dd3565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104f1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092190919063ffffffff16565b1015610532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052990610e3f565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105e49190610e5f565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610672576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106f557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ab575b5050505050905060005b815181101561078057600082828151811061071d5761071c610c5a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077890610cb8565b9150506106ff565b50600067ffffffffffffffff81111561079c5761079b610d01565b5b6040519080825280602002602001820160405280156107ca5781602001602082028036833780820191505090505b50600090805190602001906107e09291906109f2565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161080790610d61565b60006040518083038185875af1925050503d8060008114610844576040519150601f19603f3d011682016040523d82523d6000602084013e610849565b606091505b505090508061088d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088490610dd3565b60405180910390fd5b5050565b60008082815481106108a6576108a5610c5a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000670de0b6b3a76400008361093684610952565b6109409190610eb5565b61094a9190610f3e565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d39190610ffc565b5050509150506402540be400816109ea9190611077565b915050919050565b828054828255906000526020600020908101928215610a6b579160200282015b82811115610a6a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a12565b5b509050610a789190610a7c565b5090565b5b80821115610a95576000816000905550600101610a7d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac982610a9e565b9050919050565b610ad981610abe565b8114610ae457600080fd5b50565b600081359050610af681610ad0565b92915050565b600060208284031215610b1257610b11610a99565b5b6000610b2084828501610ae7565b91505092915050565b6000819050919050565b610b3c81610b29565b82525050565b6000602082019050610b576000830184610b33565b92915050565b610b6681610abe565b82525050565b6000602082019050610b816000830184610b5d565b92915050565b6000819050919050565b6000610bac610ba7610ba284610a9e565b610b87565b610a9e565b9050919050565b6000610bbe82610b91565b9050919050565b6000610bd082610bb3565b9050919050565b610be081610bc5565b82525050565b6000602082019050610bfb6000830184610bd7565b92915050565b610c0a81610b29565b8114610c1557600080fd5b50565b600081359050610c2781610c01565b92915050565b600060208284031215610c4357610c42610a99565b5b6000610c5184828501610c18565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc382610b29565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cf657610cf5610c89565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d4b600083610d30565b9150610d5682610d3b565b600082019050919050565b6000610d6c82610d3e565b9150819050919050565b600082825260208201905092915050565b7f5061796d656e74206661696c65642e0000000000000000000000000000000000600082015250565b6000610dbd600f83610d76565b9150610dc882610d87565b602082019050919050565b60006020820190508181036000830152610dec81610db0565b9050919050565b7f4469646e27742073656e6420656e6f7567682066756e64210000000000000000600082015250565b6000610e29601883610d76565b9150610e3482610df3565b602082019050919050565b60006020820190508181036000830152610e5881610e1c565b9050919050565b6000610e6a82610b29565b9150610e7583610b29565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eaa57610ea9610c89565b5b828201905092915050565b6000610ec082610b29565b9150610ecb83610b29565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f0457610f03610c89565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4982610b29565b9150610f5483610b29565b925082610f6457610f63610f0f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f8e81610f6f565b8114610f9957600080fd5b50565b600081519050610fab81610f85565b92915050565b6000819050919050565b610fc481610fb1565b8114610fcf57600080fd5b50565b600081519050610fe181610fbb565b92915050565b600081519050610ff681610c01565b92915050565b600080600080600060a0868803121561101857611017610a99565b5b600061102688828901610f9c565b955050602061103788828901610fd2565b945050604061104888828901610fe7565b935050606061105988828901610fe7565b925050608061106a88828901610f9c565b9150509295509295909350565b600061108282610fb1565b915061108d83610fb1565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110cc576110cb610c89565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561110957611108610c89565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114657611145610c89565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118357611182610c89565b5b82820290509291505056fea2646970667358221220f367f60ffe38274ff97cddc97cbd287a5bd4ba5221997eb5dd567923cd0a534564736f6c63430008080033",
  "devdoc": {
    "author": "Priyanka Sachan",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_fundMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}